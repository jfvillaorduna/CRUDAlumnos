package com.micrud.micrud.security;

import org.springframework.context.annotation.Profile;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

@RestController
@Profile("cliente") // ‚úÖ Solo activa cuando el perfil cliente est√° en uso
@RequestMapping("/api/auth-test") // ‚úÖ Ruta √∫nica para evitar colisiones
public class AuthTestController {

    // Ruta p√∫blica, no requiere token
    @GetMapping("/public")
    public ResponseEntity<String> publicAccess() {
        return ResponseEntity.ok("‚úÖ Ruta p√∫blica desde AuthTest: acceso sin token");
    }

    // Ruta protegida, requiere token v√°lido sin importar rol
    @GetMapping("/protected")
    @PreAuthorize("isAuthenticated()")
    public ResponseEntity<String> protectedAccess() {
        return ResponseEntity.ok("üîí Ruta protegida: token JWT v√°lido requerido");
    }

    // Ruta protegida con rol espec√≠fico (ROLE_USER)
    @GetMapping("/user-role")
    @PreAuthorize("hasRole('USER')")
    public ResponseEntity<String> roleProtectedAccess() {
        return ResponseEntity.ok("üõ°Ô∏è Ruta protegida: acceso permitido con rol USER");
    }

    // Ruta protegida con rol espec√≠fico (ROLE_ADMIN)
    @GetMapping("/admin-role")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<String> adminAccess() {
        return ResponseEntity.ok("üëë Ruta protegida: acceso permitido con rol ADMIN");
    }
}